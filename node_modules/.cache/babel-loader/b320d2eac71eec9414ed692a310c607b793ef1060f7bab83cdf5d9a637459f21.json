{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport authService from \"./authService\";\nconst userDefaultState = {\n  _id: \"\",\n  firstname: \"\",\n  lastname: \"\",\n  email: \"\",\n  mobile: \"\",\n  token: \"\",\n  password: \"\"\n};\nconst initialState = {\n  user: userDefaultState,\n  isError: false,\n  isLoading: false,\n  isSuccess: false,\n  message: \"\"\n};\nexport const login = createAsyncThunk(\"auth/admin-login\", async (credentials, thunkAPI) => {\n  try {\n    const response = await authService.login(credentials);\n    return response;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.error ? action.error.message || \"An error occurred\" : \"An error occurred\";\n      state.user = userDefaultState;\n    });\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","userDefaultState","_id","firstname","lastname","email","mobile","token","password","initialState","user","isError","isLoading","isSuccess","message","login","credentials","thunkAPI","response","error","rejectWithValue","authSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["/Users/shashiojha/Documents/pansari-ecom/admin-panel/legacy-app/src/features/auth/authSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport authService from \"./authService\";\nimport { LoginCredentials } from \"src/interface\";\n\ninterface User {\n  _id: string;\n  firstname: string;\n  lastname: string;\n  email: string;\n  mobile: string;\n  token: string;\n  password: string;\n}\n\ninterface AuthState {\n  user: User;\n  isError: boolean;\n  isLoading: boolean;\n  isSuccess: boolean;\n  message: string;\n}\n\nconst userDefaultState: User = {\n  _id: \"\",\n  firstname: \"\",\n  lastname: \"\",\n  email: \"\",\n  mobile: \"\",\n  token: \"\",\n  password: \"\",\n};\n\nconst initialState: AuthState = {\n  user: userDefaultState,\n  isError: false,\n  isLoading: false,\n  isSuccess: false,\n  message: \"\",\n};\n\nexport const login = createAsyncThunk<User, LoginCredentials, { rejectValue: any }>(\n    \"auth/admin-login\",\n    async (credentials: LoginCredentials, thunkAPI: any) => {\n      try {\n        const response = await authService.login(credentials);\n        return response;\n      } catch (error) {\n        return thunkAPI.rejectWithValue(error);\n      }\n    }\n  );\n  \n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(login.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(login.fulfilled, (state, action: PayloadAction<User>) => {\n        state.isLoading = false;\n        state.isSuccess = true;\n        state.user = action.payload;\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isError = true;\n        state.message = action.error ? action.error.message || \"An error occurred\" : \"An error occurred\";\n        state.user = userDefaultState;\n      });\n  },\n});\n\nexport default authSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAC/E,OAAOC,WAAW,MAAM,eAAe;AAqBvC,MAAMC,gBAAsB,GAAG;EAC7BC,GAAG,EAAE,EAAE;EACPC,SAAS,EAAE,EAAE;EACbC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,EAAE;EACVC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE;AACZ,CAAC;AAED,MAAMC,YAAuB,GAAG;EAC9BC,IAAI,EAAET,gBAAgB;EACtBU,OAAO,EAAE,KAAK;EACdC,SAAS,EAAE,KAAK;EAChBC,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,KAAK,GAAGhB,gBAAgB,CACjC,kBAAkB,EAClB,OAAOiB,WAA6B,EAAEC,QAAa,KAAK;EACtD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMlB,WAAW,CAACe,KAAK,CAACC,WAAW,CAAC;IACrD,OAAOE,QAAQ;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOF,QAAQ,CAACG,eAAe,CAACD,KAAK,CAAC;EACxC;AACF,CACF,CAAC;AAGH,OAAO,MAAME,SAAS,GAAGvB,WAAW,CAAC;EACnCwB,IAAI,EAAE,MAAM;EACZb,YAAY;EACZc,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACX,KAAK,CAACY,OAAO,EAAGC,KAAK,IAAK;MACjCA,KAAK,CAAChB,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDc,OAAO,CAACX,KAAK,CAACc,SAAS,EAAE,CAACD,KAAK,EAAEE,MAA2B,KAAK;MAChEF,KAAK,CAAChB,SAAS,GAAG,KAAK;MACvBgB,KAAK,CAACf,SAAS,GAAG,IAAI;MACtBe,KAAK,CAAClB,IAAI,GAAGoB,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDL,OAAO,CAACX,KAAK,CAACiB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC1CF,KAAK,CAAChB,SAAS,GAAG,KAAK;MACvBgB,KAAK,CAACjB,OAAO,GAAG,IAAI;MACpBiB,KAAK,CAACd,OAAO,GAAGgB,MAAM,CAACX,KAAK,GAAGW,MAAM,CAACX,KAAK,CAACL,OAAO,IAAI,mBAAmB,GAAG,mBAAmB;MAChGc,KAAK,CAAClB,IAAI,GAAGT,gBAAgB;IAC/B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeoB,SAAS,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}